<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generar valores generales
planos_ancho = PLANO_ANCHO;
planos_alto  = PLANO_ALTO ;
planos_tamanio = 70;

planos = ds_grid_create(planos_ancho, planos_alto);
planos_profundidad = ds_grid_create(planos_ancho, planos_alto);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generar planos base del nivel
var pasos  = planos_tamanio;
var startX = global.entradaX;
var startY = global.entradaY;

var xx = startX;
var yy = startY;
var avanceDireccion = 90*irandom(3);

var movX;
var movY;

ds_grid_clear(planos, CeldaValor.vacio);
while(pasos &gt; 0) {
    if ((random(1)&lt;.80))
        avanceDireccion += 90*(irandom(2)-1);
    
    movX = dcos(avanceDireccion);
    movY =-dsin(avanceDireccion);
    
    repeat(2) {
        if (planos[# xx,yy] != CeldaValor.piso) {
            pasos--;
            planos[# xx,yy]  = CeldaValor.piso;
        }
        
        for (var relX = xx-1; relX &lt; xx+2; relX++) {
        for (var relY = yy-1; relY &lt; yy+2; relY++) {
            if (planos[# relX, relY] == CeldaValor.vacio)
                planos[# relX, relY] =  CeldaValor.pared;
        }
        }
        
        if (!between(xx + movX,1,planos_ancho-2))
            movX = -movX;
        
        if (!between(yy + movY,1,planos_alto -2))
            movY = -movY;
            
        xx += movX;
        yy += movY;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generar planos de profundidad
ds_grid_clear(planos_profundidad,0);
var xx = global.entradaX;
var yy = global.entradaY;

var sigSalida = ds_queue_create();
ds_queue_enqueue(sigSalida, xx, yy);

var pasos = 1;
planos_profundidad[# xx,yy] = pasos;

while (!ds_queue_empty(sigSalida)) {
    xx = ds_queue_dequeue(sigSalida);
    yy = ds_queue_dequeue(sigSalida);
    pasos = planos_profundidad[# xx,yy]+1;
    
    for (var dir = 0; dir &lt; 360; dir += 90) {
        var sigX = xx + dcos(dir);
        var sigY = yy + dsin(dir);
        
        var celdaPiso = planos[# sigX, sigY] == CeldaValor.piso;
        
        if ((planos_profundidad[# sigX,sigY] == 0) &amp;&amp; celdaPiso) {
            ds_queue_enqueue(sigSalida, sigX, sigY);
            planos_profundidad[# sigX,sigY] = pasos;
        }
    }
}

ds_queue_destroy(sigSalida);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agregar entrada y salida
planos[# global.entradaX, global.entradaY] = CeldaValor.entrada;
var salidaX = global.entradaX;
var salidaY = global.entradaY;
var maxProfundidad = 0;

for (var xx = 1; xx &lt; planos_ancho; xx+=2) {
for (var yy = 1; yy &lt; planos_alto ; yy+=2) {
    if (planos_profundidad[# xx,yy] &gt; maxProfundidad) {
        maxProfundidad = planos_profundidad[# xx,yy];
        salidaX = xx;
        salidaY = yy;
    }
}
}

planos[# salidaX, salidaY] = CeldaValor.salida;
global.salidaX = salidaX;
global.salidaY = salidaY;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cuarto de trampas
if (chances(0.02)) {
    for (var xx = 1; xx &lt; planos_ancho-1; xx++) {
    for (var yy = 1; yy &lt; planos_alto -1; yy++) {
        if (planos[# xx,yy] == CeldaValor.pared) {
            var eliminable = true;
            
            for (var deltaX = -1; deltaX &lt; 2 &amp;&amp; eliminable; deltaX++) {
            for (var deltaY = -1; deltaY &lt; 2 &amp;&amp; eliminable; deltaY++) {
                eliminable = (planos[# xx+deltaX,yy+deltaY] != CeldaValor.vacio);
            }
            }
            
            if (eliminable) {
                if ((xx mod 2) == 0 &amp;&amp; (yy mod 2) == 0)
                    planos[# xx,yy] = CeldaValor.trampa_pared;
                else planos[# xx,yy] = CeldaValor.piso;
            }
        }
    }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agregar obstaculo trasparente
var puesto = false;

for (var xx = 1; xx &lt; planos_ancho-1 &amp;&amp; !puesto; xx++) {
for (var yy = 1; yy &lt; planos_alto -1 &amp;&amp; !puesto; yy++) {
    if (planos[# xx,yy] == CeldaValor.pared) {
        var arrProf = planos_profundidad[# xx,yy+1];
        var abaProf = planos_profundidad[# xx,yy-1];
        
        if (arrProf &gt; 0 &amp;&amp; abaProf &gt; 0 &amp;&amp; abs(arrProf-abaProf) &gt; 10) {
            planos[# xx,yy] = CeldaValor.pared_falsa_sombra;
            puesto = true;
        } else {
            var izqProf = planos_profundidad[# xx+1,yy];
            var derProf = planos_profundidad[# xx-1,yy];
            if (izqProf &gt; 0 &amp;&amp; derProf &gt; 0 &amp;&amp; abs(izqProf-derProf) &gt; 10) {
                planos[# xx,yy] = CeldaValor.pared_falsa_sombra;
                puesto = true;
            }
        }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agregar circulo magico

var puesto = false;
for(var xx = 2; xx &lt; planos_ancho-3 &amp;&amp; !puesto; xx++) {
for(var yy = 2; yy &lt; planos_alto -3 &amp;&amp; !puesto; yy++) {
    if (planos[# xx  ,yy  ] == CeldaValor.piso) {
    if (planos[# xx+1,yy  ] == CeldaValor.piso) {
    if (planos[# xx-1,yy  ] == CeldaValor.piso) {
    if (planos[# xx  ,yy+1] == CeldaValor.piso) {
    if (planos[# xx  ,yy-1] == CeldaValor.piso) {
    if (planos[# xx+1,yy+1] == CeldaValor.pared) {
    if (planos[# xx-1,yy-1] == CeldaValor.pared) {
    if (planos[# xx-1,yy+1] == CeldaValor.pared) {
    if (planos[# xx+1,yy-1] == CeldaValor.pared) {
    
    if (planos[# xx+1,yy+2] == CeldaValor.piso) {
    if (planos[# xx  ,yy+2] == CeldaValor.piso) {
    if (planos[# xx-1,yy+2] == CeldaValor.piso) {
    
    if (planos[# xx-2,yy+1] == CeldaValor.piso) {
    if (planos[# xx+2,yy+1] == CeldaValor.piso) {
    if (planos[# xx-2,yy  ] == CeldaValor.piso) {
    if (planos[# xx+2,yy  ] == CeldaValor.piso) {
    if (planos[# xx-2,yy-1] == CeldaValor.piso) {
    if (planos[# xx+2,yy-1] == CeldaValor.piso) {
    
    if (planos[# xx+1,yy-2] == CeldaValor.piso) {
    if (planos[# xx  ,yy-2] == CeldaValor.piso) {
    if (planos[# xx-1,yy-2] == CeldaValor.piso) {
        puesto = true;
        planos[# xx,yy] = CeldaValor.circulo_magico;
    }}}}}}}}}}}}}}}}}}}}}
}}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agregar dardos
repeat(obj_constructor.trampa_pared_aparicion_intentos) {
    if (chances(obj_constructor.trampa_pared_aparicion_chances)) {
        var xx = 1+irandom(planos_ancho-3);
        var yy = 1+irandom(planos_alto -3);
        if (planos[# xx,yy] == CeldaValor.pared) {
        if (planos[# xx+1,yy+1] == CeldaValor.piso) {
        if (planos[# xx+1,yy  ] == CeldaValor.piso) {
        if (planos[# xx+1,yy-1] == CeldaValor.piso) {
        if (planos[# xx  ,yy+1] == CeldaValor.piso) {
        if (planos[# xx  ,yy-1] == CeldaValor.piso) {
        if (planos[# xx-1,yy+1] == CeldaValor.piso) {
        if (planos[# xx-1,yy  ] == CeldaValor.piso) {
        if (planos[# xx-1,yy-1] == CeldaValor.piso) {
            planos[# xx, yy] = CeldaValor.trampa_pared;
        }}}}}}}}}
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agregar pared falsa
repeat(obj_constructor.pared_secreta_aparicion_intentos) {
    if (chances(obj_constructor.pared_secreta_aparicion_chances)) {
        var xx = irandom(planos_ancho-1);
        var yy = irandom(planos_alto -1);
        if (planos[# xx,yy] == CeldaValor.piso) {
            if (planos[# xx+1,yy] == planos[# xx-1,yy] &amp;&amp; planos[# xx,yy+1] == planos[# xx,yy-1]) {
                if (planos[# xx+1,yy] == CeldaValor.pared &amp;&amp; planos[# xx,yy+1] == CeldaValor.piso)
                    planos[# xx,yy] = CeldaValor.pared_falsa;
                
                if (planos[# xx+1,yy] == CeldaValor.piso &amp;&amp; planos[# xx,yy+1] == CeldaValor.pared)
                    planos[# xx,yy] = CeldaValor.pared_falsa;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agregar tesoro
if (chances(obj_constructor.tesoro_aparicion_chances)) {
    var xx = 1+irandom(planos_ancho-3);
    var yy = 1+irandom(planos_alto -3);
    if (planos[# xx,yy] == CeldaValor.pared) {
        for (var dir = 0; dir &lt; 360; dir += 90) {
            var pos = planos[# xx+dcos(dir), yy+dsin(dir)];
            var posOpp = planos[# xx+dcos(dir+180), yy+dsin(dir+180)];
            
            if (pos == CeldaValor.vacio &amp;&amp; posOpp == CeldaValor.piso) {
                planos[# xx+dcos(dir), yy+dsin(dir)] = CeldaValor.tesoro;
                planos[# xx, yy] = CeldaValor.pared_falsa;
                planos[# xx+2*dcos(dir), yy+2*dsin(dir)] = CeldaValor.pared;
                planos[# xx+dcos(dir)+dsin(dir), yy+dsin(dir)+dcos(dir)] = CeldaValor.pared;
                planos[# xx+dcos(dir)-dsin(dir), yy+dsin(dir)-dcos(dir)] = CeldaValor.pared;
                planos[# xx+2*dcos(dir)+dsin(dir), yy+2*dsin(dir)+dcos(dir)] = CeldaValor.pared;
                planos[# xx+2*dcos(dir)-dsin(dir), yy+2*dsin(dir)-dcos(dir)] = CeldaValor.pared;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agregar panes
repeat(obj_constructor.pan_aparicion_intentos) {
    if (chances(obj_constructor.pan_aparicion_chances)) {
        var xx = irandom(planos_ancho-1);
        var yy = irandom(planos_alto -1);
        if (planos[# xx,yy] == CeldaValor.piso) {
            planos[# xx,yy] = CeldaValor.pan;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agregar scrolls
repeat(1) {
    if (chances(obj_constructor.pan_aparicion_chances)) {
        var xx = irandom(planos_ancho-1);
        var yy = irandom(planos_alto -1);
        if (planos[# xx,yy] == CeldaValor.piso) {
            planos[# xx,yy] = CeldaValor.scroll;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agregar orbes
repeat(3) {
    if (chances(obj_constructor.pan_aparicion_chances)) {
        var xx = irandom(planos_ancho-1);
        var yy = irandom(planos_alto -1);
        if (planos[# xx,yy] == CeldaValor.piso) {
            planos[# xx,yy] = CeldaValor.orbe;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agregar carteles
repeat(obj_constructor.cartel_historia_aparicion_intentos) {
    if (chances(obj_constructor.cartel_historia_aparicion_chances)) {
        var xx = 1+irandom(planos_ancho-3);
        var yy = 1+irandom(planos_alto -3);
        if (planos[# xx,yy] == CeldaValor.piso){
            if (planos[# xx+1,yy] == CeldaValor.pared ||
                planos[# xx-1,yy] == CeldaValor.pared ||
                planos[# xx,yy+1] == CeldaValor.pared ||
                planos[# xx,yy-1] == CeldaValor.pared) 
                planos[# xx,yy] =  CeldaValor.cartel_historia;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agregar gas
if (chances(obj_constructor.gas_aparicion_chances)) {
    repeat(obj_constructor.gas_aparicion_intentos) {
        var xx = irandom(planos_ancho-1);
        var yy = irandom(planos_alto -1);
        if (planos[# xx,yy] == CeldaValor.piso)
            planos[# xx,yy] = CeldaValor.gas;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Agregar espinas

repeat(obj_constructor.espinas_piso_aparicion_intentos) {
    if (chances(obj_constructor.espinas_piso_aparicion_chances)) {
        var xx_ini = 1+irandom(planos_ancho-3);
        var yy_ini = 1+irandom(planos_alto -3);
        var delta = obj_constructor.espinas_piso_nivel;
        
        if (planos[# xx_ini,yy_ini] == CeldaValor.piso) {
            for (var deltaX = -delta+1; deltaX &lt; delta; deltaX++) {
            for (var deltaY = -delta+1; deltaY &lt; delta; deltaY++) {
                if (abs(deltaX) + abs(deltaY) &lt; delta) {
                    var xx = xx_ini + deltaX;
                    var yy = yy_ini + deltaY;
                    if (planos[# xx,yy] == CeldaValor.piso)
                        planos[# xx,yy] = CeldaValor.espinas_piso;
                }
            }}
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Instanciar cosas en el mapa
for(var xx = 0; xx &lt; planos_ancho; xx++) {
for(var yy = 0; yy &lt; planos_alto ; yy++) {
    var valor = planos[# xx,yy];
    if(valor &gt; 0) {
        global.esenario_plano = planos;
        global.esenario_plano_x = xx;
        global.esenario_plano_y = yy;
        
        with (instance_create(cellToX(xx),cellToY(yy), valor)) {
            event_user(EsenarioAtrib.ev_inicializar);
        }
    }
}}

instance_create(0,0,efec_perderVida);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Liberar las memorias necesarias
ds_grid_destroy(planos);
ds_grid_destroy(planos_profundidad);

grabar_esenario();
instance_destroy();

/*
with (object_index) {
    if (id != other.id) {
        ds_grid_destroy(planos_profundidad);
        instance_destroy();
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// dibujar profundidad
draw_set_valign(fa_center);
draw_set_halign(fa_center);


draw_set_colour(c_white);

for (var xx = 0; xx &lt; planos_ancho; xx++) {
for (var yy = 0; yy &lt; planos_alto ; yy++) {
    draw_text(cellToX(xx)+16, cellToY(yy)+16, string(planos_profundidad[# xx,yy]));
}
}

draw_set_valign(fa_top);
draw_set_halign(fa_left);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
